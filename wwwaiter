#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Std;
use IO::Socket;
use Term::ANSIColor;
use Term::ReadKey;
use Time::HiRes;


our $VERSION = '1.0.1';

sub HELP_MESSAGE {
    print "usage: wwwaiter [OPTIONS] URL\n";
    print "\nwwwaiter is a program for visualizing delays in receiving portions of a document from a web server. ";
    print " It wont be exact due to buffering done by your webserver and OS, but it should help diagnose slow parts of web applications.\n";
    print "\nOPTIONS\n";
    print "-v\tDisplay entire page rather than just context.\n";
    print "-d\tSpecify minimum delay in page loading to report. Default is 10 ms.\n";
    print "-c\tSpecify lines of context around a delay to display. Default is 3.\n";
    print "-p\tSpecify alternate http port. Default is 80.\n";
    print "\n";
    return;
}

our ($opt_v, $opt_d, $opt_c, $opt_p);
my ($verbose, $delay, $context, $port);

getopts('vd:c:p:');

if ( defined($opt_v) ) {
    $verbose = $opt_v;
}
else {
    $verbose = 0;
}

if ( defined($opt_d) ) {
    $delay = $opt_d / 1000;
}
else {
    $delay = .01;
}

if ( defined($opt_c) ) {
    $context = $opt_c;
}
else {
    $context = 3;
}

if ( defined($opt_p) ) {
    $port = $opt_p;
}
else {
    $port = 80;
}

unless ( @ARGV == 1 ) {
    HELP_MESSAGE();
    exit 1;
}

my $url = shift(@ARGV);

if ( $url =~ /^(.+:\/\/)(.*)/ ) {
    unless ( $1 eq 'http://' ) {
        die "This program can only speak http://, not $1 \n";
    }
    $url = $2;
}

my $host_end = index($url, '/');
my ($host, $document);

if ($host_end == -1) {
    $host = $url;
    $document = "/";
}
else {
    $host = substr($url, 0, $host_end);
    $document = substr($url, $host_end);
}

my $remote = IO::Socket::INET->new(
    Proto    => "tcp",
    PeerAddr => $host,
    PeerPort => "$port",
);
unless ($remote) { die "cannot connect to http daemon on $host" }
print $remote "GET $document HTTP/1.0\n";
print $remote "HOST: $host\n\n";
my $status = <$remote>;

unless ( $status =~ /200 OK/ ) {
    die "$status";
}

my @size    = GetTerminalSize();
my $divider = '-' x $size[0];

my @colors   = ( 'blue', 'magenta', 'cyan' );
my $color    = shift(@colors);
my $emphasis = 'bold red';
print color $color;

my $waited    = 0.0;
my $waitcount = 0;
my $start     = [ Time::HiRes::gettimeofday() ];
my $req_start = [ Time::HiRes::gettimeofday() ];

my $printcount    = 0;
my @previouslines = ();

while (<$remote>) {
    my $line    = $_;
    my $elapsed = Time::HiRes::tv_interval($start);
    my $close   = $delay - $elapsed;

    # just doing elapsed > delay doesn't work
    if ( $close < 0 ) {
        $waitcount = $waitcount + 1;
        $waited    = $waited + $elapsed;
        print colored( "$divider\n", $emphasis );
        unless ($verbose) {
            $printcount = $context;
            foreach my $previous (@previouslines) {
                print $previous;
            }
            @previouslines = ();
        }
        print colored( "Waited " . $elapsed . " seconds here\n", $emphasis );
        print colored( "$divider\n", $emphasis ) if $verbose;
        if ($verbose) {
            push( @colors, $color );
            $color = shift(@colors);
            print color $color;
        }
    }

    # filter whitespace
    unless ( $line =~ /^\s*$/ ) {
        if ($verbose) {
            print $line;
        }
        else {
            if ( $printcount > 0 ) {
                print $line;
                $printcount = $printcount - 1;
            }
            if ( scalar(@previouslines) == $context ) {
                shift(@previouslines);
            }
            push( @previouslines, $line );
        }
    }
    $start = [ Time::HiRes::gettimeofday() ];
}
if ( $waitcount > 0 ) {
    print colored( "$divider\n", $emphasis );
}
print color 'reset';
print "\nWaited $waitcount times for $waited seconds\n";
print "Total request time of "
  . Time::HiRes::tv_interval($req_start)
  . " seconds\n";
close $remote;
